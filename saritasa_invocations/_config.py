import collections.abc
import contextlib
import dataclasses
import typing

import invoke


@contextlib.contextmanager
def context_override(
    context: invoke.Context,
    **config,
) -> collections.abc.Generator[invoke.Context, typing.Any, None]:
    """Temporary override context settings."""
    old_context_config = {key: context.config.get(key) for key in config}
    context.config.update(**config)
    try:
        yield context
    finally:
        context.config.update(**old_context_config)


@dataclasses.dataclass
class SystemSettings:
    """Settings for system module."""

    settings_template: str = "config/settings/local.template.py"
    save_settings_from_template_to: str = "config/settings/local.py"
    vs_code_settings_template: str = ".vscode/recommended_settings.json"


@dataclasses.dataclass
class GitSettings:
    """Settings for git module."""

    merge_ff: str = "false"
    pull_ff: str = "only"
    copy_commit_template: str = (
        "[automated-commit]: {action}\n\n"
        "copy: {original_path}\n"
        "to:\n* {destination_paths}\n\n"
        "{project_task}"
    )
    copy_init_message_template: str = (
        "Copy {original_path} to:\n"
        "* {destination_paths}\n\n"
        "Count of created commits: {commits_count}"
    )


@dataclasses.dataclass
class PreCommitSettings:
    """Settings for pre-commit module."""

    hooks: collections.abc.Sequence[str] = (
        "pre-commit",
        "pre-push",
        "commit-msg",
    )


@dataclasses.dataclass
class PythonSettings:
    """Settings for python module."""

    entry: str = "python"
    docker_service: str = "web"
    docker_service_params: str = "--rm"
    mypy_entry: str = "-m mypy"
    pytest_entry: str = "-m pytest"


@dataclasses.dataclass
class DockerSettings:
    """Settings for docker module."""

    compose_cmd = "docker compose"
    main_containers: collections.abc.Sequence[str] = (
        "postgres",
        "redis",
    )
    build_image_tag: str = ""
    buildpack_builder: str = "paketobuildpacks/builder-jammy-base:latest"
    buildpack_runner: str = "paketobuildpacks/run-jammy-base:latest"
    buildpack_requirements_path: str = "requirements"


@dataclasses.dataclass
class GitHubActionsSettings:
    """Settings for github actions module."""

    hosts: collections.abc.Sequence[str] = ()


@dataclasses.dataclass
class DjangoSettings:
    """Settings for django module."""

    runserver_command: str = "runserver_plus"
    runserver_host: str = "0.0.0.0"  # noqa: S104
    runserver_port: str = "8000"
    runserver_params: str = ""
    runserver_docker_params: str = "--rm --service-ports"
    migrate_command: str = "migrate"
    makemessages_params: str = "--all --ignore venv"
    compilemessages_params: str = ""
    verbose_email_name: str = "Email address"
    default_superuser_email: str = "root@localhost"
    verbose_username_name: str = "Username"
    default_superuser_username: str = "root"
    verbose_password_name: str = "Password"  # noqa: S105
    default_superuser_password: str = "root"  # noqa: S105
    shell_command: str = "shell_plus --ipython"
    path_to_remote_config_file: str = "/workspace/app/config/settings/.env"
    manage_file_path: str = "./manage.py"
    settings_path: str = "config.settings.local"
    app_boilerplate_link: str | None = None
    app_template_directory: str = "."
    apps_path: str = "apps"
    remote_db_config_mapping: dict[str, str] = dataclasses.field(
        default_factory=lambda: {
            "dbname": "RDS_DB_NAME",
            "host": "RDS_DB_HOST",
            "port": "RDS_DB_PORT",
            "username": "RDS_DB_USER",
            "password": "RDS_DB_PASSWORD",
        },
    )


@dataclasses.dataclass
class CelerySettings:
    """Settings for celery module."""

    app: str = "config.celery.app"
    scheduler: str = "django"
    service_name: str = "celery"
    loglevel: str = "info"
    extra_params: tuple[str] = ("--beat",)
    local_cmd: str = (
        "celery --app {app} "
        "worker --scheduler={scheduler} --loglevel={loglevel} {extra_params}"
    )


@dataclasses.dataclass
class FastAPISettings:
    """Settings for fastapi module."""

    uvicorn_command: str = "-m uvicorn"
    app: str = "config:fastapi_app"
    host: str = "0.0.0.0"  # noqa: S104
    port: str = "8000"
    params: str = "--reload"
    docker_params: str = "--rm --service-ports"


@dataclasses.dataclass
class AlembicSettings:
    """Settings for alembic module."""

    connect_attempts: int = 10
    command: str = "-m alembic"
    migrations_folder: str = "db/migrations/versions"
    adjust_messages: collections.abc.Sequence[str] = (
        "# ### commands auto generated by Alembic - please adjust! ###",
        "# ### end Alembic commands ###",
    )
    db_config_mapping: dict[str, str] = dataclasses.field(
        default_factory=lambda: {
            "dbname": "rds_db_name",
            "host": "rds_db_host",
            "port": "rds_db_port",
            "username": "rds_db_user",
            "password": "rds_db_password",
        },
    )


@dataclasses.dataclass
class CruftSettings:
    """Settings for cruft module."""

    project_tmp_folder: str = ".tmp"


@dataclasses.dataclass
class DBSettings:
    """Settings for db module."""

    password_pattern: str = "Password.*"  # noqa: S105
    load_dump_command: str = (
        "psql "
        "{additional_params} "
        "--dbname={dbname} "
        "--host={host} "
        "--port={port} "
        "--username={username} "
        "--file={file}"
    )
    dump_filename: str = "local-db-dump.sql"
    load_additional_params: str = "--quiet"
    dump_command: str = (
        "pg_dump "
        "{additional_params} "
        "--dbname={dbname} "
        "--host={host} "
        "--port={port} "
        "--username={username} "
        "--file={file}"
    )
    dump_additional_params: str = ""
    dump_no_owner: bool = True
    dump_include_table: str = ""
    dump_exclude_table: str = ""
    dump_exclude_table_data: str = ""
    dump_exclude_extension: str = ""


# This mapping should not be filled manually. You just need create an instance
# of `K8SSettings` and it will be auto added to this mapping
_K8S_CONFIGS: dict[str, "K8SSettings"] = {}


class K8SSettingsMeta(type):
    """Meta class for K8SSettings."""

    def __call__(cls, *args, **kwargs) -> "K8SSettings":  # noqa: ANN002
        """Update mapping of environments."""
        instance: K8SSettings = super().__call__(*args, **kwargs)
        if instance.name in _K8S_CONFIGS:
            raise ValueError(f"{instance.name} config is already defined")
        _K8S_CONFIGS[instance.name] = instance
        return instance


@dataclasses.dataclass(frozen=True)
class K8SDBSettings:
    """Description of k8s db config."""

    namespace: str
    pod_selector: str
    dump_filename_template: str = (
        "{project_name}-{env}-{timestamp:%Y-%m-%d}-db-dump.{extension}"
    )
    password_pattern: str = "Password: "  # noqa: S105
    get_pod_name_command: str = (
        "kubectl get pods --namespace {db_pod_namespace} "
        "--selector={db_pod_selector} "
        "--output jsonpath='{{.items[0].metadata.name}}'"
    )
    exec_command: str = (
        "kubectl exec -ti --namespace {db_pod_namespace} $({db_pod})"
    )
    dump_dir: str = "tmp"
    dump_command: str = (
        "pg_dump "
        "{additional_params} "
        "--dbname={dbname} "
        "--host={host} "
        "--port={port} "
        "--username={username} "
        "--file {file}"
    )
    dump_additional_params: str = ""
    dump_no_owner: bool = True
    dump_include_table: str = ""
    dump_exclude_table: str = ""
    dump_exclude_table_data: str = ""
    dump_exclude_extension: str = ""


@dataclasses.dataclass(frozen=True)
class K8SSettings(metaclass=K8SSettingsMeta):
    """Description of environment config."""

    name: str
    namespace: str
    context: str
    proxy: str | None = None
    cluster: str | None = None
    db_config: K8SDBSettings | None = None
    port: str | None = None
    auth: str | None = None
    component_selector: str | None = None
    get_pod_name_command: str | None = None
    default_component: str | None = None
    default_entry: str | None = None
    default_command: str | None = None
    python_shell: str | None = None
    health_check: str | None = None
    secret_file_path_in_pod: str | None = None
    temp_secret_file_path: str | None = None
    env_color: str | None = None


@dataclasses.dataclass(frozen=True)
class K8SDefaultSettings:
    """Default settings that could be shared among all env."""

    proxy: str | None = None
    db_config: K8SDBSettings | None = None
    port: str = "443"
    auth: str = "github"
    component_selector: str = "app.kubernetes.io/component"
    get_pod_name_command: str = (
        "kubectl get pods "
        "--selector {component_selector}={component} "
        "--no-headers --output jsonpath='{{.items[0].metadata.name}}'"
    )
    default_component: str = "backend"
    default_entry: str = "/cnb/lifecycle/launcher"
    default_command: str = "bash"
    python_shell: str = "shell_plus"
    health_check: str = "health_check"
    secret_file_path_in_pod: str | None = None
    temp_secret_file_path: str = ".env.to_delete"  # noqa: S105
    env_color: str = "cyan"


@dataclasses.dataclass(frozen=True)
class K8SGeneratedSettings:
    """Merge of defaults and environment config."""

    name: str
    cluster: str
    proxy: str
    context: str
    namespace: str
    db_config: K8SDBSettings
    port: str
    auth: str
    component_selector: str
    get_pod_name_command: str
    default_component: str
    default_entry: str
    default_command: str
    python_shell: str
    health_check: str
    secret_file_path_in_pod: str
    temp_secret_file_path: str
    env_color: str

    @classmethod
    def merge_settings(
        cls,
        default: K8SDefaultSettings,
        env_settings: K8SSettings,
    ) -> "K8SGeneratedSettings":
        """Create settings from default and env settings."""
        generated_config = {}
        for field in dataclasses.asdict(env_settings):
            generated_config[field] = getattr(
                env_settings,
                field,
                None,
            ) or getattr(
                default,
                field,
                None,
            )
        return cls(**generated_config)  # type: ignore


@dataclasses.dataclass(frozen=True)
class PIPSettings:
    """Settings for pip module."""

    dependencies_folder: str = "requirements"
    in_files: collections.abc.Sequence[str] = (
        "production.in",
        "development.in",
    )


@dataclasses.dataclass(frozen=True)
class Config:
    """Settings for saritasa invocations."""

    project_name: str = ""
    default_k8s_env: str = "dev"

    system: SystemSettings = dataclasses.field(
        default_factory=SystemSettings,
    )
    git: GitSettings = dataclasses.field(
        default_factory=GitSettings,
    )
    pre_commit: PreCommitSettings = dataclasses.field(
        default_factory=PreCommitSettings,
    )
    docker: DockerSettings = dataclasses.field(
        default_factory=DockerSettings,
    )
    python: PythonSettings = dataclasses.field(
        default_factory=PythonSettings,
    )
    github_actions: GitHubActionsSettings = dataclasses.field(
        default_factory=GitHubActionsSettings,
    )
    django: DjangoSettings = dataclasses.field(
        default_factory=DjangoSettings,
    )
    celery: CelerySettings = dataclasses.field(
        default_factory=CelerySettings,
    )
    fastapi: FastAPISettings = dataclasses.field(
        default_factory=FastAPISettings,
    )
    alembic: AlembicSettings = dataclasses.field(
        default_factory=AlembicSettings,
    )
    cruft: CruftSettings = dataclasses.field(
        default_factory=CruftSettings,
    )
    db: DBSettings = dataclasses.field(
        default_factory=DBSettings,
    )
    k8s_defaults: K8SDefaultSettings = dataclasses.field(
        default_factory=K8SDefaultSettings,
    )
    k8s_configs: dict[str, K8SSettings] = dataclasses.field(
        default_factory=lambda: _K8S_CONFIGS,
    )
    pip: PIPSettings = dataclasses.field(
        default_factory=PIPSettings,
    )

    def __post_init__(self) -> None:
        """Set default values for settings that are dependant on others."""
        if not self.docker.build_image_tag:
            self.docker.build_image_tag = self.project_name

        if not self.github_actions.hosts:
            self.github_actions.hosts = self.docker.main_containers

    @classmethod
    def from_context(cls, context: invoke.Context) -> "Config":
        """Get config from invoke context."""
        return context.config.get(
            "saritasa_invocations",
            cls(),
        )
